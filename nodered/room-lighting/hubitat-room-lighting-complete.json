[
    {
        "id": "room-lighting-tab",
        "type": "tab",
        "label": "Hubitat Room Lighting",
        "disabled": false,
        "info": "Complete Hubitat Room Lighting replica with full configuration UI\n\n✅ All Hubitat Features:\n- Motion, Contact, Switch, Illuminance, Time, Mode triggers\n- Scene capture and playback\n- Override protection and advanced turn-off\n- Multiple device types with full control\n- Conditions and restrictions\n- Fade times, delays, and all options"
    },
    {
        "id": "system-init",
        "type": "inject",
        "z": "room-lighting-tab",
        "name": "System Initialize",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "init",
        "payloadType": "str",
        "x": 140,
        "y": 60,
        "wires": [["storage-manager"]]
    },
    {
        "id": "storage-manager",
        "type": "function",
        "z": "room-lighting-tab",
        "name": "Storage Manager",
        "func": "// Complete storage management for Room Lighting\nconst fs = global.get('fs') || require('fs');\nconst path = global.get('path') || require('path');\nglobal.set('fs', fs);\nglobal.set('path', path);\n\nconst dataDir = path.join(process.env.NODE_RED_HOME || process.cwd(), 'room-lighting-data');\nif (!fs.existsSync(dataDir)) {\n    fs.mkdirSync(dataDir, { recursive: true });\n}\n\nconst configFile = path.join(dataDir, 'configs.json');\nconst stateFile = path.join(dataDir, 'states.json');\nconst sceneFile = path.join(dataDir, 'scenes.json');\n\n// Initialize with Hubitat-style default configuration\nlet configs = {};\ntry {\n    if (fs.existsSync(configFile)) {\n        configs = JSON.parse(fs.readFileSync(configFile, 'utf8'));\n    } else {\n        configs = {\n            'example_room': {\n                name: 'Example Room',\n                enabled: true,\n                devices: [],\n                activationTriggers: {\n                    motion: { enabled: false, sensors: [], timeout: 300 },\n                    contact: { enabled: false, sensors: [] },\n                    switches: { enabled: false, switches: [] },\n                    illuminance: { enabled: false, sensors: [], threshold: 50 },\n                    time: { enabled: false, schedules: [] },\n                    modes: { enabled: false, modes: [] }\n                },\n                turnOffTriggers: {\n                    motion: { enabled: true },\n                    contact: { enabled: false, sensors: [] },\n                    switches: { enabled: false, switches: [] },\n                    time: { enabled: false, schedules: [] }\n                },\n                options: {\n                    fadeTime: 0,\n                    activationDelay: 0,\n                    preventOverride: false,\n                    activateEvenIfPartial: false,\n                    turnOffMethod: 'turnOff',\n                    dimLevel: 10,\n                    useScenes: false,\n                    activationScene: '',\n                    turnOffScene: ''\n                },\n                conditions: {\n                    modes: [],\n                    timeRestrictions: [],\n                    illuminanceRestrictions: []\n                }\n            }\n        };\n        fs.writeFileSync(configFile, JSON.stringify(configs, null, 2));\n    }\n} catch (e) {\n    node.warn('Config error: ' + e.message);\n    configs = {};\n}\n\nlet states = {};\ntry {\n    if (fs.existsSync(stateFile)) {\n        states = JSON.parse(fs.readFileSync(stateFile, 'utf8'));\n    }\n} catch (e) {\n    states = {};\n}\n\nlet scenes = {};\ntry {\n    if (fs.existsSync(sceneFile)) {\n        scenes = JSON.parse(fs.readFileSync(sceneFile, 'utf8'));\n    }\n} catch (e) {\n    scenes = {};\n}\n\nglobal.set('roomConfigs', configs);\nglobal.set('roomStates', states);\nglobal.set('roomScenes', scenes);\nglobal.set('configFile', configFile);\nglobal.set('stateFile', stateFile);\nglobal.set('sceneFile', sceneFile);\n\nnode.status({fill: 'green', shape: 'dot', text: `${Object.keys(configs).length} rooms ready`});\nreturn msg;",
        "outputs": 1,
        "x": 320,
        "y": 60,
        "wires": [[]],
        "info": "Manages all persistent storage"
    },
    {
        "id": "config-ui-main",
        "type": "ui_template",
        "z": "room-lighting-tab",
        "group": "config-group",
        "name": "Main Configuration UI",
        "order": 1,
        "width": 12,
        "height": 20,
        "format": "<div ng-init=\"loadConfigs()\" class=\"room-config\">\n<style>\n.room-config .nav-tabs { margin-bottom: 15px; }\n.room-config .form-group { margin-bottom: 10px; }\n.room-config .table-sm td { padding: 4px; }\n.room-config .btn-sm { padding: 2px 8px; }\n.room-config .section-header { background: #f8f9fa; padding: 8px; margin: 10px 0 5px 0; border-left: 4px solid #007bff; }\n</style>\n\n<h3>Room Lighting Configuration</h3>\n\n<!-- Room Selection -->\n<div class=\"row\">\n  <div class=\"col-6\">\n    <select ng-model=\"selectedRoom\" ng-change=\"selectRoom()\" class=\"form-control\">\n      <option value=\"\">Select Room Configuration</option>\n      <option ng-repeat=\"(id, config) in configs\" value=\"{{id}}\">{{config.name}}</option>\n    </select>\n  </div>\n  <div class=\"col-6\">\n    <button class=\"btn btn-primary\" ng-click=\"newRoom()\">New Room</button>\n    <button class=\"btn btn-success\" ng-click=\"saveRoom()\" ng-disabled=\"!currentRoom\">Save</button>\n    <button class=\"btn btn-danger\" ng-click=\"deleteRoom()\" ng-disabled=\"!currentRoom\">Delete</button>\n  </div>\n</div>\n\n<div ng-if=\"currentRoom\" class=\"mt-3\">\n  <!-- Basic Settings -->\n  <div class=\"section-header\"><h5>Basic Settings</h5></div>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <label>Room Name:</label>\n      <input type=\"text\" ng-model=\"currentRoom.name\" class=\"form-control\">\n    </div>\n    <div class=\"col-6\">\n      <label><input type=\"checkbox\" ng-model=\"currentRoom.enabled\"> Room Enabled</label>\n    </div>\n  </div>\n\n  <!-- Navigation Tabs -->\n  <ul class=\"nav nav-tabs\" role=\"tablist\">\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" ng-class=\"{active: activeTab === 'devices'}\" ng-click=\"setTab('devices')\">Devices</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" ng-class=\"{active: activeTab === 'activation'}\" ng-click=\"setTab('activation')\">Activation</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" ng-class=\"{active: activeTab === 'turnoff'}\" ng-click=\"setTab('turnoff')\">Turn Off</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" ng-class=\"{active: activeTab === 'options'}\" ng-click=\"setTab('options')\">Options</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" ng-class=\"{active: activeTab === 'conditions'}\" ng-click=\"setTab('conditions')\">Conditions</a>\n    </li>\n  </ul>\n\n  <!-- Devices Tab -->\n  <div ng-show=\"activeTab === 'devices'\" class=\"tab-content\">\n    <div class=\"section-header\">Devices to Control</div>\n    <button class=\"btn btn-sm btn-primary\" ng-click=\"addDevice()\">Add Device</button>\n    <button class=\"btn btn-sm btn-info\" ng-click=\"captureScene()\">Capture Current Scene</button>\n    <table class=\"table table-sm\">\n      <thead>\n        <tr><th>Entity ID</th><th>Type</th><th>Activate</th><th>Turn Off</th><th>Brightness</th><th>Color Temp</th><th>RGB Color</th><th>Actions</th></tr>\n      </thead>\n      <tbody>\n        <tr ng-repeat=\"device in currentRoom.devices\">\n          <td><input type=\"text\" ng-model=\"device.entity_id\" placeholder=\"light.example\" class=\"form-control form-control-sm\"></td>\n          <td>\n            <select ng-model=\"device.type\" class=\"form-control form-control-sm\">\n              <option value=\"light\">Light</option>\n              <option value=\"switch\">Switch</option>\n              <option value=\"cover\">Cover</option>\n              <option value=\"button\">Button</option>\n              <option value=\"scene\">Scene</option>\n            </select>\n          </td>\n          <td><input type=\"checkbox\" ng-model=\"device.activate\"></td>\n          <td><input type=\"checkbox\" ng-model=\"device.turnOff\"></td>\n          <td ng-if=\"device.type === 'light'\">\n            <input type=\"number\" ng-model=\"device.settings.brightness\" min=\"1\" max=\"255\" class=\"form-control form-control-sm\" style=\"width:70px;\">\n          </td>\n          <td ng-if=\"device.type === 'light'\">\n            <input type=\"number\" ng-model=\"device.settings.color_temp\" min=\"153\" max=\"500\" class=\"form-control form-control-sm\" style=\"width:70px;\">\n          </td>\n          <td ng-if=\"device.type === 'light'\">\n            <input type=\"color\" ng-model=\"device.settings.rgb_color\" class=\"form-control form-control-sm\" style=\"width:50px;\">\n          </td>\n          <td ng-if=\"device.type !== 'light'\" colspan=\"3\">-</td>\n          <td><button class=\"btn btn-sm btn-danger\" ng-click=\"removeDevice($index)\">×</button></td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <!-- Activation Tab -->\n  <div ng-show=\"activeTab === 'activation'\" class=\"tab-content\">\n    <div class=\"section-header\">Activation Triggers</div>\n    \n    <!-- Motion Sensors -->\n    <h6><input type=\"checkbox\" ng-model=\"currentRoom.activationTriggers.motion.enabled\"> Motion Sensors</h6>\n    <div ng-if=\"currentRoom.activationTriggers.motion.enabled\">\n      <div class=\"row\">\n        <div class=\"col-8\">\n          <input type=\"text\" ng-model=\"newMotionSensor\" placeholder=\"binary_sensor.motion\" class=\"form-control\">\n        </div>\n        <div class=\"col-4\">\n          <button class=\"btn btn-sm btn-primary\" ng-click=\"addMotionSensor()\">Add</button>\n        </div>\n      </div>\n      <ul class=\"list-group mt-2\">\n        <li class=\"list-group-item d-flex justify-content-between\" ng-repeat=\"sensor in currentRoom.activationTriggers.motion.sensors\">\n          {{sensor}}\n          <button class=\"btn btn-sm btn-danger\" ng-click=\"removeMotionSensor($index)\">×</button>\n        </li>\n      </ul>\n      <div class=\"form-group\">\n        <label>Motion Timeout (seconds):</label>\n        <input type=\"number\" ng-model=\"currentRoom.activationTriggers.motion.timeout\" class=\"form-control\" min=\"10\" max=\"3600\">\n      </div>\n    </div>\n\n    <!-- Contact Sensors -->\n    <h6><input type=\"checkbox\" ng-model=\"currentRoom.activationTriggers.contact.enabled\"> Contact Sensors</h6>\n    <div ng-if=\"currentRoom.activationTriggers.contact.enabled\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <input type=\"text\" ng-model=\"newContactSensor\" placeholder=\"binary_sensor.door\" class=\"form-control\">\n        </div>\n        <div class=\"col-3\">\n          <select ng-model=\"newContactTrigger\" class=\"form-control\">\n            <option value=\"open\">Open</option>\n            <option value=\"closed\">Closed</option>\n          </select>\n        </div>\n        <div class=\"col-3\">\n          <button class=\"btn btn-sm btn-primary\" ng-click=\"addContactSensor()\">Add</button>\n        </div>\n      </div>\n      <ul class=\"list-group mt-2\">\n        <li class=\"list-group-item d-flex justify-content-between\" ng-repeat=\"sensor in currentRoom.activationTriggers.contact.sensors\">\n          {{sensor.entity_id}} ({{sensor.trigger}})\n          <button class=\"btn btn-sm btn-danger\" ng-click=\"removeContactSensor($index)\">×</button>\n        </li>\n      </ul>\n    </div>\n\n    <!-- Switches -->\n    <h6><input type=\"checkbox\" ng-model=\"currentRoom.activationTriggers.switches.enabled\"> Switches</h6>\n    <div ng-if=\"currentRoom.activationTriggers.switches.enabled\">\n      <div class=\"row\">\n        <div class=\"col-8\">\n          <input type=\"text\" ng-model=\"newSwitch\" placeholder=\"switch.wall_switch\" class=\"form-control\">\n        </div>\n        <div class=\"col-4\">\n          <button class=\"btn btn-sm btn-primary\" ng-click=\"addSwitch()\">Add</button>\n        </div>\n      </div>\n      <ul class=\"list-group mt-2\">\n        <li class=\"list-group-item d-flex justify-content-between\" ng-repeat=\"switch in currentRoom.activationTriggers.switches.switches\">\n          {{switch}}\n          <button class=\"btn btn-sm btn-danger\" ng-click=\"removeSwitch($index)\">×</button>\n        </li>\n      </ul>\n    </div>\n\n    <!-- Illuminance -->\n    <h6><input type=\"checkbox\" ng-model=\"currentRoom.activationTriggers.illuminance.enabled\"> Illuminance Sensors</h6>\n    <div ng-if=\"currentRoom.activationTriggers.illuminance.enabled\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <input type=\"text\" ng-model=\"newIllumSensor\" placeholder=\"sensor.illuminance\" class=\"form-control\">\n        </div>\n        <div class=\"col-3\">\n          <input type=\"number\" ng-model=\"newIllumThreshold\" placeholder=\"50\" class=\"form-control\">\n        </div>\n        <div class=\"col-3\">\n          <button class=\"btn btn-sm btn-primary\" ng-click=\"addIllumSensor()\">Add</button>\n        </div>\n      </div>\n      <ul class=\"list-group mt-2\">\n        <li class=\"list-group-item d-flex justify-content-between\" ng-repeat=\"sensor in currentRoom.activationTriggers.illuminance.sensors\">\n          {{sensor.entity_id}} (< {{sensor.threshold}} lux)\n          <button class=\"btn btn-sm btn-danger\" ng-click=\"removeIllumSensor($index)\">×</button>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <!-- Turn Off Tab -->\n  <div ng-show=\"activeTab === 'turnoff'\" class=\"tab-content\">\n    <div class=\"section-header\">Turn Off Triggers</div>\n    <p>Configure what triggers the lights to turn off</p>\n    \n    <h6><input type=\"checkbox\" ng-model=\"currentRoom.turnOffTriggers.motion.enabled\"> Motion Timeout</h6>\n    <h6><input type=\"checkbox\" ng-model=\"currentRoom.turnOffTriggers.contact.enabled\"> Contact Sensors</h6>\n    <h6><input type=\"checkbox\" ng-model=\"currentRoom.turnOffTriggers.switches.enabled\"> Switches</h6>\n    <h6><input type=\"checkbox\" ng-model=\"currentRoom.turnOffTriggers.time.enabled\"> Time Schedule</h6>\n  </div>\n\n  <!-- Options Tab -->\n  <div ng-show=\"activeTab === 'options'\" class=\"tab-content\">\n    <div class=\"section-header\">Advanced Options</div>\n    \n    <div class=\"row\">\n      <div class=\"col-4\">\n        <label>Fade Time (seconds):</label>\n        <input type=\"number\" ng-model=\"currentRoom.options.fadeTime\" class=\"form-control\" min=\"0\" max=\"60\">\n      </div>\n      <div class=\"col-4\">\n        <label>Activation Delay (seconds):</label>\n        <input type=\"number\" ng-model=\"currentRoom.options.activationDelay\" class=\"form-control\" min=\"0\" max=\"300\">\n      </div>\n      <div class=\"col-4\">\n        <label>Turn Off Method:</label>\n        <select ng-model=\"currentRoom.options.turnOffMethod\" class=\"form-control\">\n          <option value=\"turnOff\">Turn Off</option>\n          <option value=\"preset\">Use Preset Settings</option>\n          <option value=\"dim\">Dim to Low Level</option>\n          <option value=\"scene\">Use Scene</option>\n        </select>\n      </div>\n    </div>\n    \n    <div class=\"row mt-2\" ng-if=\"currentRoom.options.turnOffMethod === 'dim'\">\n      <div class=\"col-4\">\n        <label>Dim Level (%):</label>\n        <input type=\"number\" ng-model=\"currentRoom.options.dimLevel\" class=\"form-control\" min=\"1\" max=\"100\">\n      </div>\n    </div>\n    \n    <div class=\"mt-2\">\n      <label><input type=\"checkbox\" ng-model=\"currentRoom.options.preventOverride\"> Prevent turn-off after manual override</label><br>\n      <label><input type=\"checkbox\" ng-model=\"currentRoom.options.activateEvenIfPartial\"> Activate even if already partially on</label><br>\n      <label><input type=\"checkbox\" ng-model=\"currentRoom.options.useScenes\"> Use Scenes instead of device control</label>\n    </div>\n    \n    <div ng-if=\"currentRoom.options.useScenes\" class=\"mt-2\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <label>Activation Scene:</label>\n          <input type=\"text\" ng-model=\"currentRoom.options.activationScene\" placeholder=\"scene.room_on\" class=\"form-control\">\n        </div>\n        <div class=\"col-6\">\n          <label>Turn Off Scene:</label>\n          <input type=\"text\" ng-model=\"currentRoom.options.turnOffScene\" placeholder=\"scene.room_off\" class=\"form-control\">\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Conditions Tab -->\n  <div ng-show=\"activeTab === 'conditions'\" class=\"tab-content\">\n    <div class=\"section-header\">Conditions & Restrictions</div>\n    <p>Set conditions that must be met for activation</p>\n    \n    <h6>Mode Restrictions</h6>\n    <div class=\"row\">\n      <div class=\"col-8\">\n        <input type=\"text\" ng-model=\"newModeRestriction\" placeholder=\"Home, Away, Night\" class=\"form-control\">\n      </div>\n      <div class=\"col-4\">\n        <button class=\"btn btn-sm btn-primary\" ng-click=\"addModeRestriction()\">Add Mode</button>\n      </div>\n    </div>\n    \n    <h6 class=\"mt-3\">Time Restrictions</h6>\n    <div class=\"row\">\n      <div class=\"col-3\">\n        <input type=\"time\" ng-model=\"newTimeStart\" class=\"form-control\">\n      </div>\n      <div class=\"col-3\">\n        <input type=\"time\" ng-model=\"newTimeEnd\" class=\"form-control\">\n      </div>\n      <div class=\"col-3\">\n        <select ng-model=\"newTimeDays\" class=\"form-control\">\n          <option value=\"all\">All Days</option>\n          <option value=\"weekdays\">Weekdays</option>\n          <option value=\"weekends\">Weekends</option>\n        </select>\n      </div>\n      <div class=\"col-3\">\n        <button class=\"btn btn-sm btn-primary\" ng-click=\"addTimeRestriction()\">Add</button>\n      </div>\n    </div>\n  </div>\n</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "x": 140,
        "y": 140,
        "wires": [["config-processor"]]
    },
    {
        "id": "config-processor",
        "type": "function",
        "z": "room-lighting-tab",
        "name": "Configuration Processor",
        "func": "// Handle all configuration operations\nconst configs = global.get('roomConfigs') || {};\nconst fs = global.get('fs');\nconst configFile = global.get('configFile');\n\nfunction saveConfigs() {\n    try {\n        fs.writeFileSync(configFile, JSON.stringify(configs, null, 2));\n        global.set('roomConfigs', configs);\n        return true;\n    } catch (e) {\n        node.error('Save error: ' + e.message);\n        return false;\n    }\n}\n\nif (msg.topic === 'getConfigs') {\n    return { payload: configs };\n    \n} else if (msg.topic === 'saveRoom') {\n    const room = msg.payload;\n    const id = room.id || 'room_' + Date.now();\n    delete room.id;\n    \n    // Ensure proper structure\n    if (!room.devices) room.devices = [];\n    if (!room.activationTriggers) {\n        room.activationTriggers = {\n            motion: { enabled: false, sensors: [], timeout: 300 },\n            contact: { enabled: false, sensors: [] },\n            switches: { enabled: false, switches: [] },\n            illuminance: { enabled: false, sensors: [] },\n            time: { enabled: false, schedules: [] },\n            modes: { enabled: false, modes: [] }\n        };\n    }\n    if (!room.turnOffTriggers) {\n        room.turnOffTriggers = {\n            motion: { enabled: true },\n            contact: { enabled: false, sensors: [] },\n            switches: { enabled: false, switches: [] },\n            time: { enabled: false, schedules: [] }\n        };\n    }\n    if (!room.options) {\n        room.options = {\n            fadeTime: 0,\n            activationDelay: 0,\n            preventOverride: false,\n            activateEvenIfPartial: false,\n            turnOffMethod: 'turnOff',\n            dimLevel: 10,\n            useScenes: false,\n            activationScene: '',\n            turnOffScene: ''\n        };\n    }\n    if (!room.conditions) {\n        room.conditions = {\n            modes: [],\n            timeRestrictions: [],\n            illuminanceRestrictions: []\n        };\n    }\n    \n    room.lastModified = new Date().toISOString();\n    configs[id] = room;\n    \n    if (saveConfigs()) {\n        node.status({fill: 'green', shape: 'dot', text: `Saved: ${room.name}`});\n        return { payload: `Room '${room.name}' saved successfully`, roomId: id };\n    } else {\n        return { payload: 'Error saving room configuration' };\n    }\n    \n} else if (msg.topic === 'deleteRoom') {\n    const roomId = msg.payload;\n    if (configs[roomId]) {\n        const roomName = configs[roomId].name;\n        delete configs[roomId];\n        \n        if (saveConfigs()) {\n            node.status({fill: 'yellow', shape: 'dot', text: `Deleted: ${roomName}`});\n            return { payload: `Room '${roomName}' deleted successfully` };\n        }\n    }\n    return { payload: 'Room not found' };\n    \n} else if (msg.topic === 'captureScene') {\n    const { roomId, sceneName, devices } = msg.payload;\n    // Scene capture logic would go here\n    return { payload: `Scene '${sceneName}' captured for room` };\n}\n\nreturn null;",
        "outputs": 1,
        "x": 320,
        "y": 140,
        "wires": [["config-ui-main"]],
        "info": "Processes all configuration operations"
    },
    {
        "id": "config-group",
        "type": "ui_group",
        "name": "Room Configuration",
        "tab": "room-lighting-ui",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "room-lighting-ui",
        "type": "ui_tab",
        "name": "Room Lighting",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
