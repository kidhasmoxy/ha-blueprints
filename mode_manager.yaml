blueprint:
  name: Mode Manager (Hubitat Style)
  description: |
    Comprehensive mode management system that replicates Hubitat Mode Manager functionality.
    Automatically changes modes based on time, presence, buttons, and switches using an input_select entity.
    Supports sunrise/sunset triggers, presence detection, button events, and switch states.
  domain: automation
  input:
    # ==========================================
    # MODE CONFIGURATION
    # ==========================================
    mode_selector:
      name: Mode Input Select Entity
      description: Select the input_select entity that will store the current mode
      selector:
        entity:
          domain: input_select
    
    # ==========================================
    # TIME-BASED MODE CHANGES
    # ==========================================
    enable_time_modes:
      name: Enable Time-Based Mode Changes
      description: Enable automatic mode changes based on time
      default: true
      selector:
        boolean: {}
    
    # Morning/Day Mode Settings
    morning_mode:
      name: "Day Mode"
      description: "Enter the mode name from your input_select to set during daytime (e.g., 'Day', 'Morning')"
      default: "Day"
      selector:
        text: {}
    
    morning_trigger_type:
      name: "Day Mode Trigger"
      description: "How to trigger Day mode"
      default: "time"
      selector:
        select:
          options:
            - label: "Fixed Time"
              value: "time"
            - label: "Sunrise (with optional offset)"
              value: "sunrise"
            - label: "Earlier of Fixed Time or Sunrise"
              value: "earlier"
            - label: "Later of Fixed Time or Sunrise"
              value: "later"
    
    morning_time:
      name: "Day Mode - Fixed Time"
      description: "Fixed time to switch to Day mode"
      default: "07:00:00"
      selector:
        time: {}
    
    sunrise_offset:
      name: "Day Mode - Sunrise Offset (minutes)"
      description: "Minutes before (-) or after (+) sunrise"
      default: 0
      selector:
        number:
          min: -120
          max: 120
          step: 1
    
    morning_schedule_type:
      name: "Day Mode - Schedule Type"
      description: "Choose how to control when Day mode is triggered"
      default: "all_days"
      selector:
        select:
          options:
            - label: "All Days"
              value: "all_days"
            - label: "Select Specific Days"
              value: "specific_days"
            - label: "Use Schedule Helper"
              value: "schedule_helper"
    
    morning_days:
      name: "Day Mode - Days of Week"
      description: "Select days when Day mode should be triggered (only used if 'Select Specific Days' chosen above)"
      default: []
      selector:
        select:
          options:
            - label: "Monday"
              value: "monday"
            - label: "Tuesday"
              value: "tuesday"
            - label: "Wednesday"
              value: "wednesday"
            - label: "Thursday"
              value: "thursday"
            - label: "Friday"
              value: "friday"
            - label: "Saturday"
              value: "saturday"
            - label: "Sunday"
              value: "sunday"
          multiple: true
    
    morning_schedule:
      name: "Day Mode - Schedule Helper"
      description: "Select a schedule helper entity (only used if 'Use Schedule Helper' chosen above)"
      default: ""
      selector:
        entity:
          domain: schedule
          multiple: false
    
    # Evening Mode Settings
    evening_mode:
      name: "Evening Mode"
      description: "Enter the mode name from your input_select to set during evening (e.g., 'Evening', 'Dusk')"
      default: "Evening"
      selector:
        text: {}
    
    evening_trigger_type:
      name: "Evening Mode Trigger"
      description: "How to trigger Evening mode"
      default: "time"
      selector:
        select:
          options:
            - label: "Fixed Time"
              value: "time"
            - label: "Sunset (with optional offset)"
              value: "sunset"
            - label: "Earlier of Fixed Time or Sunset"
              value: "earlier"
            - label: "Later of Fixed Time or Sunset"
              value: "later"
    
    evening_time:
      name: "Evening Mode - Fixed Time"
      description: "Fixed time to switch to Evening mode"
      default: "18:00:00"
      selector:
        time: {}
    
    sunset_offset:
      name: "Evening Mode - Sunset Offset (minutes)"
      description: "Minutes before (-) or after (+) sunset"
      default: 0
      selector:
        number:
          min: -120
          max: 120
          step: 1
    
    evening_schedule_type:
      name: "Evening Mode - Schedule Type"
      description: "Choose how to control when Evening mode is triggered"
      default: "all_days"
      selector:
        select:
          options:
            - label: "All Days"
              value: "all_days"
            - label: "Select Specific Days"
              value: "specific_days"
            - label: "Use Schedule Helper"
              value: "schedule_helper"
    
    evening_days:
      name: "Evening Mode - Days of Week"
      description: "Select days when Evening mode should be triggered (only used if 'Select Specific Days' chosen above)"
      default: []
      selector:
        select:
          options:
            - label: "Monday"
              value: "monday"
            - label: "Tuesday"
              value: "tuesday"
            - label: "Wednesday"
              value: "wednesday"
            - label: "Thursday"
              value: "thursday"
            - label: "Friday"
              value: "friday"
            - label: "Saturday"
              value: "saturday"
            - label: "Sunday"
              value: "sunday"
          multiple: true
    
    evening_schedule:
      name: "Evening Mode - Schedule Helper"
      description: "Select a schedule helper entity (only used if 'Use Schedule Helper' chosen above)"
      default: ""
      selector:
        entity:
          domain: schedule
          multiple: false
    
    # Night Mode Settings
    night_mode:
      name: "Night Mode"
      description: "Enter the mode name from your input_select to set at night (e.g., 'Night', 'Sleep')"
      default: "Night"
      selector:
        text: {}
    
    night_time:
      name: "Night Mode - Fixed Time"
      description: "Fixed time to switch to Night mode"
      default: "22:00:00"
      selector:
        time: {}
    
    night_schedule_type:
      name: "Night Mode - Schedule Type"
      description: "Choose how to control when Night mode is triggered"
      default: "all_days"
      selector:
        select:
          options:
            - label: "All Days"
              value: "all_days"
            - label: "Select Specific Days"
              value: "specific_days"
            - label: "Use Schedule Helper"
              value: "schedule_helper"
    
    night_days:
      name: "Night Mode - Days of Week"
      description: "Select days when Night mode should be triggered (only used if 'Select Specific Days' chosen above)"
      default: []
      selector:
        select:
          options:
            - label: "Monday"
              value: "monday"
            - label: "Tuesday"
              value: "tuesday"
            - label: "Wednesday"
              value: "wednesday"
            - label: "Thursday"
              value: "thursday"
            - label: "Friday"
              value: "friday"
            - label: "Saturday"
              value: "saturday"
            - label: "Sunday"
              value: "sunday"
          multiple: true
    
    night_schedule:
      name: "Night Mode - Schedule Helper"
      description: "Select a schedule helper entity (only used if 'Use Schedule Helper' chosen above)"
      default: ""
      selector:
        entity:
          domain: schedule
          multiple: false
    
    skip_time_modes:
      name: Skip Time Changes for These Modes
      description: Comma-separated list of modes that should not be changed by time-based triggers (e.g., "Away,Vacation,Party")
      default: "Away"
      selector:
        text: {}
    
    set_mode_on_startup:
      name: Set Mode on System Startup
      description: Set mode based on time table when Home Assistant starts
      default: false
      selector:
        boolean: {}
    
    # ==========================================
    # PRESENCE-BASED MODE CHANGES
    # ==========================================
    enable_presence_modes:
      name: Enable Presence-Based Mode Changes
      description: Enable automatic mode changes based on presence
      default: false
      selector:
        boolean: {}
    
    presence_trackers:
      name: Device Trackers / Person Entities
      description: Select device tracker or person entities for presence detection
      default: []
      selector:
        target:
          entity:
            - domain: person
            - domain: device_tracker
    
    away_trigger_logic:
      name: Away Mode Trigger Logic
      description: When to trigger Away mode
      default: "all_away"
      selector:
        select:
          options:
            - label: "When ALL selected people/devices are away"
              value: "all_away"
            - label: "When ANY selected person/device leaves"
              value: "any_away"
    
    away_mode:
      name: Away Mode
      description: Enter the mode name from your input_select to set when away condition is met (e.g., 'Away', 'Vacation')
      default: "Away"
      selector:
        text: {}
    
    return_trigger_logic:
      name: Return Trigger Logic
      description: When to trigger return from Away mode
      default: "any_home"
      selector:
        select:
          options:
            - label: "When ANY selected person/device returns home"
              value: "any_home"
            - label: "When ALL selected people/devices are home"
              value: "all_home"
    
    return_from_away_mode:
      name: Return from Away Behavior
      description: How to handle returning from away mode
      default: "time_based"
      selector:
        select:
          options:
            - label: "Use time-based mode (recommended)"
              value: "time_based"
            - label: "Use specific mode"
              value: "specific"
    
    return_mode:
      name: Return Mode
      description: Enter the mode name from your input_select to set when returning (if not using time-based, e.g., 'Day')
      default: "Day"
      selector:
        text: {}
    
    # ==========================================
    # GUEST MODE
    # ==========================================
    enable_guest_mode:
      name: Enable Guest Mode
      description: Enable guest mode to prevent away mode changes when guests are present
      default: false
      selector:
        boolean: {}
    
    guest_mode_sensor:
      name: Guest Mode Sensor
      description: Binary sensor that indicates when guests are present (prevents away mode when 'on')
      default: ""
      selector:
        entity:
          domain: 
            - binary_sensor
            - input_boolean
            - switch
    
    # ==========================================
    # BUTTON-BASED MODE CHANGES
    # ==========================================
    enable_button_modes:
      name: Enable Button-Based Mode Changes
      description: Enable mode changes triggered by button events
      default: false
      selector:
        boolean: {}
    
    button_devices:
      name: Button Devices
      description: Select button devices for mode control
      default: {}
      selector:
        entity:
          domain: 
            - event
            - sensor
          multiple: true
    
    # Button Mode Mappings
    button_mode_1:
      name: Button Mode 1
      description: Enter mode name from your input_select for first button event (leave empty to disable)
      default: ""
      selector:
        text: {}
    
    button_event_1:
      name: Button Event 1
      description: Button event to trigger Mode 1 (e.g., "button_1_single")
      default: ""
      selector:
        text: {}
    
    button_mode_2:
      name: Button Mode 2
      description: Enter mode name from your input_select for second button event (leave empty to disable)
      default: ""
      selector:
        text: {}
    
    button_event_2:
      name: Button Event 2
      description: Button event to trigger Mode 2 (e.g., "button_2_single")
      default: ""
      selector:
        text: {}
    
    button_mode_3:
      name: Button Mode 3
      description: Enter mode name from your input_select for third button event (leave empty to disable)
      default: ""
      selector:
        text: {}
    
    button_event_3:
      name: Button Event 3
      description: Button event to trigger Mode 3 (e.g., "button_3_single")
      default: ""
      selector:
        text: {}
    
    button_mode_4:
      name: Button Mode 4
      description: Enter mode name from your input_select for fourth button event (leave empty to disable)
      default: ""
      selector:
        text: {}
    
    button_event_4:
      name: Button Event 4
      description: Button event to trigger Mode 4 (e.g., "button_4_single")
      default: ""
      selector:
        text: {}
    
    # ==========================================
    # SWITCH-BASED MODE CHANGES
    # ==========================================
    enable_switch_modes:
      name: Enable Switch-Based Mode Changes
      description: Enable mode changes triggered by switch states
      default: false
      selector:
        boolean: {}
    
    switch_devices:
      name: Switch Devices
      description: Select switch entities for mode control
      default: {}
      selector:
        entity:
          domain: 
            - switch
            - light
            - input_boolean
          multiple: true
    
    # Switch Mode Mappings
    switch_mode_1:
      name: Switch Mode 1
      description: Enter mode name from your input_select for first switch trigger (leave empty to disable)
      default: ""
      selector:
        text: {}
    
    switch_entity_1:
      name: Switch Entity 1
      description: Switch entity for Mode 1
      default: ""
      selector:
        entity:
          domain: 
            - switch
            - light
            - input_boolean
    
    switch_state_1:
      name: Switch State 1
      description: Switch state that triggers Mode 1
      default: "on"
      selector:
        select:
          options:
            - label: "On"
              value: "on"
            - label: "Off"
              value: "off"
    
    switch_mode_2:
      name: Switch Mode 2
      description: Enter mode name from your input_select for second switch trigger (leave empty to disable)
      default: ""
      selector:
        text: {}
    
    switch_entity_2:
      name: Switch Entity 2
      description: Switch entity for Mode 2
      default: ""
      selector:
        entity:
          domain: 
            - switch
            - light
            - input_boolean
    
    switch_state_2:
      name: Switch State 2
      description: Switch state that triggers Mode 2
      default: "off"
      selector:
        select:
          options:
            - label: "On"
              value: "on"
            - label: "Off"
              value: "off"

variables:
  mode_entity: !input mode_selector
  skip_modes: !input skip_time_modes
  current_mode: "{{ states(mode_entity) }}"
  skip_mode_list: "{{ skip_modes.split(',') | map('trim') | list if skip_modes else [] }}"
  morning_trigger_type: !input morning_trigger_type
  evening_trigger_type: !input evening_trigger_type
  enable_time_modes: !input enable_time_modes
  presence_trackers: !input presence_trackers
  away_trigger_logic: !input away_trigger_logic
  return_trigger_logic: !input return_trigger_logic
  away_mode: !input away_mode
  morning_mode: !input morning_mode
  evening_mode: !input evening_mode
  night_mode: !input night_mode
  return_mode: !input return_mode
  morning_schedule_type: !input morning_schedule_type
  morning_days: !input morning_days
  morning_schedule: !input morning_schedule
  evening_schedule_type: !input evening_schedule_type
  evening_days: !input evening_days
  evening_schedule: !input evening_schedule
  night_schedule_type: !input night_schedule_type
  night_days: !input night_days
  night_schedule: !input night_schedule
  current_weekday: "{{ now().strftime('%A').lower() }}"
  enable_guest_mode: !input enable_guest_mode
  guest_mode_sensor: !input guest_mode_sensor
  # Button mappings
  button_mappings:
    - mode: !input button_mode_1
      event: !input button_event_1
    - mode: !input button_mode_2
      event: !input button_event_2
    - mode: !input button_mode_3
      event: !input button_event_3
    - mode: !input button_mode_4
      event: !input button_event_4
  # Switch mappings
  switch_mappings:
    - mode: !input switch_mode_1
      entity: !input switch_entity_1
      state: !input switch_state_1
    - mode: !input switch_mode_2
      entity: !input switch_entity_2
      state: !input switch_state_2

trigger:
  # Day Mode triggers
  - platform: time
    at: !input morning_time
    id: "morning_time"
    enabled: "{{ enable_time_modes and morning_trigger_type in ['time', 'earlier', 'later'] }}"
  
  - platform: sun
    event: sunrise
    offset: !input sunrise_offset
    id: "sunrise"
    enabled: "{{ enable_time_modes and morning_trigger_type in ['sunrise', 'earlier', 'later'] }}"
  
  # Evening Mode triggers
  - platform: time
    at: !input evening_time
    id: "evening_time"
    enabled: "{{ enable_time_modes and evening_trigger_type in ['time', 'earlier', 'later'] }}"
  
  - platform: sun
    event: sunset
    offset: !input sunset_offset
    id: "sunset"
    enabled: "{{ enable_time_modes and evening_trigger_type in ['sunset', 'earlier', 'later'] }}"
  
  # Night Mode trigger (always fixed time)
  - platform: time
    at: !input night_time
    id: "night_time"
    enabled: !input enable_time_modes
  
  # Presence triggers
  - platform: state
    entity_id: "{{ presence_trackers.entity_id if presence_trackers else [] }}"
    to: 
      - "not_home"
      - "away"
    id: "presence_away"
    enabled: "{{ enable_presence_modes and presence_trackers.entity_id | default([]) | length > 0 }}"
  
  - platform: state
    entity_id: "{{ presence_trackers.entity_id if presence_trackers else [] }}"
    to: "home"
    id: "presence_home"
    enabled: "{{ enable_presence_modes and presence_trackers.entity_id | default([]) | length > 0 }}"
  
  # Button triggers
  - platform: event
    event_type: 
      - zha_event
      - deconz_event
      - hue_event
    id: "button_event"
    enabled: !input enable_button_modes
  
  # Switch triggers
  - platform: state
    entity_id: !input switch_entity_1
    to: !input switch_state_1
    id: "switch_1"
    enabled: "{{ enable_switch_modes and switch_entity_1 != '' and switch_mode_1 != '' }}"
  
  - platform: state
    entity_id: !input switch_entity_2
    to: !input switch_state_2
    id: "switch_2"
    enabled: "{{ enable_switch_modes and switch_entity_2 != '' and switch_mode_2 != '' }}"
  
  # Startup trigger
  - platform: homeassistant
    event: start
    id: "startup"
    enabled: !input set_mode_on_startup

condition: []

action:
  - choose:
      # Day Mode time-based changes
      - conditions:
          - condition: trigger
            id: 
              - "morning_time"
              - "sunrise"
          - condition: template
            value_template: "{{ current_mode not in skip_mode_list }}"
          - condition: template
            value_template: >
              {% set schedule_type = morning_schedule_type %}
              {% if schedule_type == 'all_days' %}
                true
              {% elif schedule_type == 'specific_days' %}
                {% set days = morning_days %}
                {% set weekday = current_weekday %}
                {{ days | length == 0 or weekday in days }}
              {% elif schedule_type == 'schedule_helper' %}
                {% set schedule_entity = morning_schedule %}
                {{ schedule_entity == '' or is_state(schedule_entity, 'on') }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: >
              {% set trigger_type = morning_trigger_type %}
              {% set trigger_id = trigger.id %}
              {% if trigger_type == 'time' %}
                {{ trigger_id == 'morning_time' }}
              {% elif trigger_type == 'sunrise' %}
                {{ trigger_id == 'sunrise' }}
              {% elif trigger_type == 'earlier' %}
                {% set now_time = now() %}
                {% set fixed_time = today_at(morning_time) %}
                {% set sunrise_time = as_timestamp(state_attr('sun.sun', 'next_rising')) | timestamp_custom('%Y-%m-%d %H:%M:%S') | as_datetime + timedelta(minutes=sunrise_offset) %}
                {% if trigger_id == 'morning_time' %}
                  {{ fixed_time <= sunrise_time }}
                {% elif trigger_id == 'sunrise' %}
                  {{ sunrise_time <= fixed_time }}
                {% endif %}
              {% elif trigger_type == 'later' %}
                {% set now_time = now() %}
                {% set fixed_time = today_at(morning_time) %}
                {% set sunrise_time = as_timestamp(state_attr('sun.sun', 'next_rising')) | timestamp_custom('%Y-%m-%d %H:%M:%S') | as_datetime + timedelta(minutes=sunrise_offset) %}
                {% if trigger_id == 'morning_time' %}
                  {{ fixed_time >= sunrise_time }}
                {% elif trigger_id == 'sunrise' %}
                  {{ sunrise_time >= fixed_time }}
                {% endif %}
              {% endif %}
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input morning_mode
      
      # Evening Mode time-based changes
      - conditions:
          - condition: trigger
            id: 
              - "evening_time"
              - "sunset"
          - condition: template
            value_template: "{{ current_mode not in skip_mode_list }}"
          - condition: template
            value_template: >
              {% set schedule_type = evening_schedule_type %}
              {% if schedule_type == 'all_days' %}
                true
              {% elif schedule_type == 'specific_days' %}
                {% set days = evening_days %}
                {% set weekday = current_weekday %}
                {{ days | length == 0 or weekday in days }}
              {% elif schedule_type == 'schedule_helper' %}
                {% set schedule_entity = evening_schedule %}
                {{ schedule_entity == '' or is_state(schedule_entity, 'on') }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: >
              {% set trigger_type = evening_trigger_type %}
              {% set trigger_id = trigger.id %}
              {% if trigger_type == 'time' %}
                {{ trigger_id == 'evening_time' }}
              {% elif trigger_type == 'sunset' %}
                {{ trigger_id == 'sunset' }}
              {% elif trigger_type == 'earlier' %}
                {% set now_time = now() %}
                {% set fixed_time = today_at(evening_time) %}
                {% set sunset_time = as_timestamp(state_attr('sun.sun', 'next_setting')) | timestamp_custom('%Y-%m-%d %H:%M:%S') | as_datetime + timedelta(minutes=sunset_offset) %}
                {% if trigger_id == 'evening_time' %}
                  {{ fixed_time <= sunset_time }}
                {% elif trigger_id == 'sunset' %}
                  {{ sunset_time <= fixed_time }}
                {% endif %}
              {% elif trigger_type == 'later' %}
                {% set now_time = now() %}
                {% set fixed_time = today_at(evening_time) %}
                {% set sunset_time = as_timestamp(state_attr('sun.sun', 'next_setting')) | timestamp_custom('%Y-%m-%d %H:%M:%S') | as_datetime + timedelta(minutes=sunset_offset) %}
                {% if trigger_id == 'evening_time' %}
                  {{ fixed_time >= sunset_time }}
                {% elif trigger_id == 'sunset' %}
                  {{ sunset_time >= fixed_time }}
                {% endif %}
              {% endif %}
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input evening_mode
      
      # Night Mode time-based changes
      - conditions:
          - condition: trigger
            id: "night_time"
          - condition: template
            value_template: "{{ current_mode not in skip_mode_list }}"
          - condition: template
            value_template: >
              {% set schedule_type = night_schedule_type %}
              {% if schedule_type == 'all_days' %}
                true
              {% elif schedule_type == 'specific_days' %}
                {% set days = night_days %}
                {% set weekday = current_weekday %}
                {{ days | length == 0 or weekday in days }}
              {% elif schedule_type == 'schedule_helper' %}
                {% set schedule_entity = night_schedule %}
                {{ schedule_entity == '' or is_state(schedule_entity, 'on') }}
              {% else %}
                true
              {% endif %}
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input night_mode
      
      # Presence-based mode changes - Away
      - conditions:
          - condition: trigger
            id: "presence_away"
          - condition: template
            value_template: >
              {% set trackers = presence_trackers %}
              {% set logic = away_trigger_logic %}
              {% if trackers %}
                {% if logic == 'all_away' %}
                  {{ expand(trackers) | selectattr('state', 'eq', 'home') | list | length == 0 }}
                {% elif logic == 'any_away' %}
                  {{ expand(trackers) | selectattr('state', 'eq', 'not_home') | list | length > 0 }}
                {% else %}
                  false
                {% endif %}
              {% else %}
                false
              {% endif %}
          - condition: template
            value_template: >
              {% set guest_enabled = enable_guest_mode %}
              {% set guest_sensor = guest_mode_sensor %}
              {% if guest_enabled and guest_sensor != '' %}
                {{ not is_state(guest_sensor, 'on') }}
              {% else %}
                true
              {% endif %}
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input away_mode
      
      # Presence-based mode changes - Return Home
      - conditions:
          - condition: trigger
            id: "presence_home"
          - condition: template
            value_template: "{{ current_mode == away_mode }}"
          - condition: template
            value_template: >
              {% set tracker_entities = presence_trackers.entity_id | default([]) %}
              {% set logic = return_trigger_logic %}
              {% if tracker_entities | length == 0 %}
                false
              {% elif logic == 'any_home' %}
                {{ expand(tracker_entities) | selectattr('state', 'eq', 'home') | list | length > 0 }}
              {% elif logic == 'all_home' %}
                {{ expand(tracker_entities) | selectattr('state', 'eq', 'home') | list | length == tracker_entities | length }}
              {% else %}
                false
              {% endif %}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ return_from_away_mode == 'time_based' }}"
                sequence:
                  - service: input_select.select_option
                    target:
                      entity_id: !input mode_selector
                    data:
                      option: >
                        {% set current_time = now().time() %}
                        {% set morning = morning_time %}
                        {% set evening = evening_time %}
                        {% set night = night_time %}
                        {% if current_time >= night or current_time < morning %}
                          {{ night_mode }}
                        {% elif current_time >= evening %}
                          {{ evening_mode }}
                        {% else %}
                          {{ morning_mode }}
                        {% endif %}
            default:
              - service: input_select.select_option
                target:
                  entity_id: !input mode_selector
                data:
                  option: !input return_mode
      
      # Button-based mode changes
      - conditions:
          - condition: trigger
            id: "button_event"
          - condition: template
            value_template: >
              {% set event_data = trigger.event.data %}
              {% set command = event_data.command %}
              {% set mappings = button_mappings %}
              {% set valid_events = mappings | selectattr('event', 'ne', '') | map(attribute='event') | list %}
              {{ command in valid_events }}
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: >
                {% set event_data = trigger.event.data %}
                {% set command = event_data.command %}
                {% set mappings = button_mappings %}
                {% for mapping in mappings %}
                  {% if mapping.event == command and mapping.mode != '' %}
                    {{ mapping.mode }}
                    {% break %}
                  {% endif %}
                {% endfor %}
      
      # Switch-based mode changes
      - conditions:
          - condition: trigger
            id: "switch_1"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input switch_mode_1
      
      - conditions:
          - condition: trigger
            id: "switch_2"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input switch_mode_2
      
      # Startup mode setting
      - conditions:
          - condition: trigger
            id: "startup"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: >
                {% set current_time = now().time() %}
                {% set morning = morning_time %}
                {% set evening = evening_time %}
                {% set night = night_time %}
                {% if current_time >= night or current_time < morning %}
                  {{ night_mode }}
                {% elif current_time >= evening %}
                  {{ evening_mode }}
                {% else %}
                  {{ morning_mode }}
                {% endif %}

mode: queued
max: 10
