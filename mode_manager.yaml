blueprint:
  name: Mode Manager (Hubitat Style)
  description: |
    Comprehensive mode management system that replicates Hubitat Mode Manager functionality.
    Automatically changes modes based on time, presence, buttons, and switches using an input_select entity.
    Supports sunrise/sunset triggers, presence detection, button events, and switch states.
  domain: automation
  input:
    # ==========================================
    # MODE CONFIGURATION
    # ==========================================
    mode_selector:
      name: Mode Input Select Entity
      description: Select the input_select entity that will store the current mode
      selector:
        entity:
          domain: input_select
    
    # ==========================================
    # TIME-BASED MODE CHANGES
    # ==========================================
    enable_time_modes:
      name: Enable Time-Based Mode Changes
      description: Enable automatic mode changes based on time
      default: true
      selector:
        boolean: {}
    
    # Morning/Day Mode Settings
    morning_mode:
      name: "Day Mode Name"
      description: "Mode to set during daytime (triggered by morning time or sunrise)"
      default: "Day"
      selector:
        text: {}
    
    morning_trigger_type:
      name: "Day Mode Trigger"
      description: "How to trigger Day mode"
      default: "time"
      selector:
        select:
          options:
            - label: "Fixed Time"
              value: "time"
            - label: "Sunrise (with optional offset)"
              value: "sunrise"
    
    morning_time:
      name: "Day Mode - Fixed Time"
      description: "Fixed time to switch to Day mode (only used if 'Fixed Time' selected above)"
      default: "07:00:00"
      selector:
        time: {}
    
    sunrise_offset:
      name: "Day Mode - Sunrise Offset (minutes)"
      description: "Minutes before (-) or after (+) sunrise to trigger Day mode (only used if 'Sunrise' selected above)"
      default: 0
      selector:
        number:
          min: -120
          max: 120
          step: 1
    
    # Evening Mode Settings
    evening_mode:
      name: "Evening Mode Name"
      description: "Mode to set during evening (triggered by evening time or sunset)"
      default: "Evening"
      selector:
        text: {}
    
    evening_trigger_type:
      name: "Evening Mode Trigger"
      description: "How to trigger Evening mode"
      default: "time"
      selector:
        select:
          options:
            - label: "Fixed Time"
              value: "time"
            - label: "Sunset (with optional offset)"
              value: "sunset"
    
    evening_time:
      name: "Evening Mode - Fixed Time"
      description: "Fixed time to switch to Evening mode (only used if 'Fixed Time' selected above)"
      default: "18:00:00"
      selector:
        time: {}
    
    sunset_offset:
      name: "Evening Mode - Sunset Offset (minutes)"
      description: "Minutes before (-) or after (+) sunset to trigger Evening mode (only used if 'Sunset' selected above)"
      default: 0
      selector:
        number:
          min: -120
          max: 120
          step: 1
    
    # Night Mode Settings
    night_mode:
      name: "Night Mode Name"
      description: "Mode to set at night (always uses fixed time)"
      default: "Night"
      selector:
        text: {}
    
    night_time:
      name: "Night Mode - Fixed Time"
      description: "Fixed time to switch to Night mode"
      default: "22:00:00"
      selector:
        time: {}
    
    skip_time_modes:
      name: Skip Time Changes for These Modes
      description: Modes that should not be changed by time-based triggers (e.g., Away)
      default: "Away"
      selector:
        text: {}
    
    set_mode_on_startup:
      name: Set Mode on System Startup
      description: Set mode based on time table when Home Assistant starts
      default: false
      selector:
        boolean: {}
    
    # ==========================================
    # PRESENCE-BASED MODE CHANGES
    # ==========================================
    enable_presence_modes:
      name: Enable Presence-Based Mode Changes
      description: Enable automatic mode changes based on presence
      default: false
      selector:
        boolean: {}
    
    presence_trackers:
      name: Device Trackers / Person Entities
      description: Select device tracker or person entities for presence detection
      default: []
      selector:
        target:
          entity:
            - domain: person
            - domain: device_tracker
    
    away_trigger_logic:
      name: Away Mode Trigger Logic
      description: When to trigger Away mode
      default: "all_away"
      selector:
        select:
          options:
            - label: "When ALL selected people/devices are away"
              value: "all_away"
            - label: "When ANY selected person/device leaves"
              value: "any_away"
    
    away_mode:
      name: Away Mode Name
      description: Mode to set when away condition is met
      default: "Away"
      selector:
        text: {}
    
    return_trigger_logic:
      name: Return Trigger Logic
      description: When to trigger return from Away mode
      default: "any_home"
      selector:
        select:
          options:
            - label: "When ANY selected person/device returns home"
              value: "any_home"
            - label: "When ALL selected people/devices are home"
              value: "all_home"
    
    return_from_away_mode:
      name: Return from Away Behavior
      description: How to handle returning from away mode
      default: "time_based"
      selector:
        select:
          options:
            - label: "Use time-based mode (recommended)"
              value: "time_based"
            - label: "Use specific mode"
              value: "specific"
    
    return_mode:
      name: Return Mode
      description: Specific mode to set when returning (if not using time-based)
      default: "Day"
      selector:
        text: {}
    
    # ==========================================
    # BUTTON-BASED MODE CHANGES
    # ==========================================
    enable_button_modes:
      name: Enable Button-Based Mode Changes
      description: Enable mode changes triggered by button events
      default: false
      selector:
        boolean: {}
    
    button_devices:
      name: Button Devices
      description: Select button devices for mode control
      default: {}
      selector:
        entity:
          domain: 
            - event
            - sensor
          multiple: true
    
    button_day_event:
      name: Day Mode Button Event
      description: Button event to trigger Day mode (e.g., "button_1_single")
      default: ""
      selector:
        text: {}
    
    button_evening_event:
      name: Evening Mode Button Event
      description: Button event to trigger Evening mode
      default: ""
      selector:
        text: {}
    
    button_night_event:
      name: Night Mode Button Event
      description: Button event to trigger Night mode
      default: ""
      selector:
        text: {}
    
    button_away_event:
      name: Away Mode Button Event
      description: Button event to trigger Away mode
      default: ""
      selector:
        text: {}
    
    # ==========================================
    # SWITCH-BASED MODE CHANGES
    # ==========================================
    enable_switch_modes:
      name: Enable Switch-Based Mode Changes
      description: Enable mode changes triggered by switch states
      default: false
      selector:
        boolean: {}
    
    switch_devices:
      name: Switch Devices
      description: Select switch entities for mode control
      default: {}
      selector:
        entity:
          domain: 
            - switch
            - light
            - input_boolean
          multiple: true
    
    switch_day_on:
      name: Day Mode Switch (On)
      description: Switch that triggers Day mode when turned on
      default: ""
      selector:
        entity:
          domain: 
            - switch
            - light
            - input_boolean
    
    switch_night_off:
      name: Night Mode Switch (Off)
      description: Switch that triggers Night mode when turned off
      default: ""
      selector:
        entity:
          domain: 
            - switch
            - light
            - input_boolean

variables:
  mode_entity: !input mode_selector
  skip_modes: !input skip_time_modes
  current_mode: "{{ states(mode_entity) }}"
  skip_mode_list: "{{ skip_modes.split(',') | map('trim') | list }}"
  morning_trigger_type: !input morning_trigger_type
  evening_trigger_type: !input evening_trigger_type
  enable_time_modes: !input enable_time_modes
  presence_trackers: !input presence_trackers
  away_trigger_logic: !input away_trigger_logic
  return_trigger_logic: !input return_trigger_logic
  away_mode: !input away_mode

trigger:
  # Day Mode triggers
  - platform: time
    at: !input morning_time
    id: "morning_time"
    enabled: "{{ enable_time_modes and morning_trigger_type == 'time' }}"
  
  - platform: sun
    event: sunrise
    offset: !input sunrise_offset
    id: "sunrise"
    enabled: "{{ enable_time_modes and morning_trigger_type == 'sunrise' }}"
  
  # Evening Mode triggers
  - platform: time
    at: !input evening_time
    id: "evening_time"
    enabled: "{{ enable_time_modes and evening_trigger_type == 'time' }}"
  
  - platform: sun
    event: sunset
    offset: !input sunset_offset
    id: "sunset"
    enabled: "{{ enable_time_modes and evening_trigger_type == 'sunset' }}"
  
  # Night Mode trigger (always fixed time)
  - platform: time
    at: !input night_time
    id: "night_time"
    enabled: !input enable_time_modes
  
  # Presence triggers
  - platform: state
    entity_id: "{{ presence_trackers.entity_id if presence_trackers else [] }}"
    to: 
      - "not_home"
      - "away"
    id: "presence_away"
    enabled: "{{ enable_presence_modes and presence_trackers.entity_id | default([]) | length > 0 }}"
  
  - platform: state
    entity_id: "{{ presence_trackers.entity_id if presence_trackers else [] }}"
    to: "home"
    id: "presence_home"
    enabled: "{{ enable_presence_modes and presence_trackers.entity_id | default([]) | length > 0 }}"
  
  # Button triggers
  - platform: event
    event_type: 
      - zha_event
      - deconz_event
      - hue_event
    id: "button_event"
    enabled: !input enable_button_modes
  
  # Switch triggers
  - platform: state
    entity_id: !input switch_day_on
    to: "on"
    id: "switch_day_on"
    enabled: !input enable_switch_modes
  
  - platform: state
    entity_id: !input switch_night_off
    to: "off"
    id: "switch_night_off"
    enabled: !input enable_switch_modes
  
  # Startup trigger
  - platform: homeassistant
    event: start
    id: "startup"
    enabled: !input set_mode_on_startup

condition: []

action:
  - choose:
      # Time-based mode changes
      - conditions:
          - condition: trigger
            id: 
              - "morning_time"
              - "sunrise"
          - condition: template
            value_template: "{{ current_mode not in skip_mode_list }}"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input morning_mode
      
      - conditions:
          - condition: trigger
            id: 
              - "evening_time"
              - "sunset"
          - condition: template
            value_template: "{{ current_mode not in skip_mode_list }}"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input evening_mode
      
      - conditions:
          - condition: trigger
            id: "night_time"
          - condition: template
            value_template: "{{ current_mode not in skip_mode_list }}"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input night_mode
      
      # Presence-based mode changes - Away
      - conditions:
          - condition: trigger
            id: "presence_away"
          - condition: template
            value_template: >
              {% set tracker_entities = presence_trackers.entity_id | default([]) %}
              {% set logic = away_trigger_logic %}
              {% if tracker_entities | length == 0 %}
                false
              {% elif logic == 'all_away' %}
                {{ expand(tracker_entities) | selectattr('state', 'in', ['home']) | list | length == 0 }}
              {% elif logic == 'any_away' %}
                {{ expand(tracker_entities) | selectattr('state', 'in', ['not_home', 'away']) | list | length > 0 }}
              {% else %}
                false
              {% endif %}
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input away_mode
      
      # Presence-based mode changes - Return Home
      - conditions:
          - condition: trigger
            id: "presence_home"
          - condition: template
            value_template: "{{ current_mode == away_mode }}"
          - condition: template
            value_template: >
              {% set tracker_entities = presence_trackers.entity_id | default([]) %}
              {% set logic = return_trigger_logic %}
              {% if tracker_entities | length == 0 %}
                false
              {% elif logic == 'any_home' %}
                {{ expand(tracker_entities) | selectattr('state', 'eq', 'home') | list | length > 0 }}
              {% elif logic == 'all_home' %}
                {{ expand(tracker_entities) | selectattr('state', 'eq', 'home') | list | length == tracker_entities | length }}
              {% else %}
                false
              {% endif %}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ return_from_away_mode == 'time_based' }}"
                sequence:
                  - service: input_select.select_option
                    target:
                      entity_id: !input mode_selector
                    data:
                      option: >
                        {% set current_time = now().time() %}
                        {% set morning = morning_time %}
                        {% set evening = evening_time %}
                        {% set night = night_time %}
                        {% if current_time >= night or current_time < morning %}
                          {{ night_mode }}
                        {% elif current_time >= evening %}
                          {{ evening_mode }}
                        {% else %}
                          {{ morning_mode }}
                        {% endif %}
            default:
              - service: input_select.select_option
                target:
                  entity_id: !input mode_selector
                data:
                  option: !input return_mode
      
      # Button-based mode changes
      - conditions:
          - condition: trigger
            id: "button_event"
          - condition: template
            value_template: >
              {% set event_data = trigger.event.data %}
              {% set button_day = button_day_event %}
              {% set button_evening = button_evening_event %}
              {% set button_night = button_night_event %}
              {% set button_away = button_away_event %}
              {{ event_data.command in [button_day, button_evening, button_night, button_away] }}
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: >
                {% set event_data = trigger.event.data %}
                {% set button_day = button_day_event %}
                {% set button_evening = button_evening_event %}
                {% set button_night = button_night_event %}
                {% set button_away = button_away_event %}
                {% if event_data.command == button_day %}
                  {{ morning_mode }}
                {% elif event_data.command == button_evening %}
                  {{ evening_mode }}
                {% elif event_data.command == button_night %}
                  {{ night_mode }}
                {% elif event_data.command == button_away %}
                  {{ away_mode }}
                {% endif %}
      
      # Switch-based mode changes
      - conditions:
          - condition: trigger
            id: "switch_day_on"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input morning_mode
      
      - conditions:
          - condition: trigger
            id: "switch_night_off"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: !input night_mode
      
      # Startup mode setting
      - conditions:
          - condition: trigger
            id: "startup"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input mode_selector
            data:
              option: >
                {% set current_time = now().time() %}
                {% set morning = morning_time %}
                {% set evening = evening_time %}
                {% set night = night_time %}
                {% if current_time >= night or current_time < morning %}
                  {{ night_mode }}
                {% elif current_time >= evening %}
                  {{ evening_mode }}
                {% else %}
                  {{ morning_mode }}
                {% endif %}

mode: queued
max: 10
