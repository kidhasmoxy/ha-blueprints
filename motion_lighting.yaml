blueprint:
  name: "Motion & Mode Lighting — Per-Mode Scenes/Targets + AUX (v6.4.2, minute-based & validation-safe)"
  description: >
    Hubitat-style motion lighting with collapsible sections.
    • Per-mode: optional Scene OR Targets (+ brightness/color for Targets)
    • Activators: motion/occupancy/presence and/or contact; plus keep-alive
    • Per-mode AUX-ON/AUX-OFF, OFF-delays, Lux ON/OFF gates
    • Watch window (minutes) after activation:
        - Manual OFF ⇒ Lockout (ends by Timeout / Mode change / either)
        - Level/CT/Color change ⇒ Capture override (reuse levels on motion until override ends)
    • Lockout/Override use optional timer helpers (restart-safe); fallback self-disable only if no timer chosen.
    • Validation-safe: all scene activations use data.entity_id (no target.entity_id), avoiding save-time entity checks.
  domain: automation
  homeassistant:
    min_version: "2024.6.0"

  input:
    activation:
      name: "Activation sensors"
      icon: mdi:motion-sensor
      collapsed: false
      input:
        motion_or_presence_sensors:
          name: "Motion / Occupancy / Presence (activate)"
          description: Any of these going to 'on' activates.
          selector:
            entity:
              multiple: true
              filter:
                - domain: binary_sensor
                  device_class: motion
                - domain: binary_sensor
                  device_class: occupancy
                - domain: binary_sensor
                  device_class: presence
        contact_sensors:
          name: "Contact sensors (activate on open)"
          description: Doors/Windows that activate when opening.
          default: []
          selector:
            entity:
              multiple: true
              filter:
                - domain: binary_sensor
                  device_class: door
                - domain: binary_sensor
                  device_class: window
                - domain: binary_sensor
                  device_class: opening
        keepalive_sensors:
          name: "Keep-alive sensors (don’t activate)"
          description: Any sensor that should keep lights on (no activation).
          default: []
          selector:
            entity:
              multiple: true
              filter:
                - domain: binary_sensor

    lux:
      name: "Lux conditions"
      icon: mdi:weather-sunny-alert
      collapsed: true
      input:
        lux_sensor:
          name: "Illuminance (optional)"
          default: ""
          selector:
            entity:
              filter: [{ domain: sensor, device_class: illuminance }]
        on_lux_max:
          name: "Only turn ON if lux below"
          default: 0
          selector:
            number:
              min: 0
              max: 5000
              unit_of_measurement: lx
              mode: box
        off_lux_min:
          name: "Turn OFF if lux ≥"
          default: 0
          selector:
            number:
              min: 0
              max: 5000
              unit_of_measurement: lx
              mode: box

    modes:
      name: "Modes & per-mode setup"
      icon: mdi:theme-light-dark
      collapsed: false
      input:
        mode_helper:
          name: "Mode helper (input_select)"
          selector: { entity: { filter: [{ domain: input_select }] } }
        mode_day_value:
          name: "Mode label — Day"
          default: Day
          selector: { text: {} }
        mode_evening_value:
          name: "Mode label — Evening"
          default: Evening
          selector: { text: {} }
        mode_night_value:
          name: "Mode label — Night"
          default: Night
          selector: { text: {} }

    mode_day_section:
      name: "Mode: Day"
      icon: mdi:white-balance-sunny
      collapsed: false
      input:
        scene_day:
          name: "Scene (optional)"
          default: ""
          selector: { entity: { filter: [{ domain: scene }] } }
        target_day:
          name: "Targets (used if no Scene)"
          description: Lights only (areas/devices/light groups ok)
          default: {}
          selector:
            target:
              entity:
                domain: light
        day_brightness:
          name: "Brightness % (for Targets)"
          description: Used only when a Scene isn’t set.
          default: 100
          selector: { number: { min: 1, max: 100, step: 1 } }
        day_kelvin:
          name: "Color temperature (Kelvin, 0=skip)"
          default: 0
          selector: { number: { min: 0, max: 6500, step: 50 } }
        day_rgb:
          name: "RGB color (optional)"
          description: If set, overrides Kelvin.
          default: []
          selector: { color_rgb: }
        aux_on_day:
          name: "AUX-ON (also turn on)"
          default: {}
          selector: { target: { entity: {} } }
        aux_off_day:
          name: "AUX-OFF (also turn off)"
          default: {}
          selector: { target: { entity: {} } }
        day_off_delay:
          name: "Off-delay seconds"
          default: 900
          selector: { number: { min: 0, max: 86400, step: 1 } }

    mode_evening_section:
      name: "Mode: Evening"
      icon: mdi:weather-sunset
      collapsed: true
      input:
        scene_evening:
          name: "Scene (optional)"
          default: ""
          selector: { entity: { filter: [{ domain: scene }] } }
        target_evening:
          name: "Targets (used if no Scene)"
          description: Lights only (areas/devices/light groups ok)
          default: {}
          selector:
            target:
              entity:
                domain: light
        evening_brightness:
          name: "Brightness % (for Targets)"
          default: 100
          selector: { number: { min: 1, max: 100, step: 1 } }
        evening_kelvin:
          name: "Color temperature (Kelvin, 0=skip)"
          default: 3000
          selector: { number: { min: 0, max: 6500, step: 50 } }
        evening_rgb:
          name: "RGB color (optional)"
          default: []
          selector: { color_rgb: }
        aux_on_evening:
          name: "AUX-ON (also turn on)"
          default: {}
          selector: { target: { entity: {} } }
        aux_off_evening:
          name: "AUX-OFF (also turn off)"
          default: {}
          selector: { target: { entity: {} } }
        evening_off_delay:
          name: "Off-delay seconds"
          default: 900
          selector: { number: { min: 0, max: 86400, step: 1 } }

    mode_night_section:
      name: "Mode: Night"
      icon: mdi:weather-night
      collapsed: true
      input:
        scene_night:
          name: "Scene (optional)"
          default: ""
          selector: { entity: { filter: [{ domain: scene }] } }
        target_night:
          name: "Targets (used if no Scene)"
          description: Lights only (areas/devices/light groups ok)
          default: {}
          selector:
            target:
              entity:
                domain: light
        night_brightness:
          name: "Brightness % (for Targets)"
          default: 10
          selector: { number: { min: 1, max: 100, step: 1 } }
        night_kelvin:
          name: "Color temperature (Kelvin, 0=skip)"
          default: 2000
          selector: { number: { min: 0, max: 6500, step: 50 } }
        night_rgb:
          name: "RGB color (optional)"
          default: []
          selector: { color_rgb: }
        aux_on_night:
          name: "AUX-ON (also turn on)"
          default: {}
          selector: { target: { entity: {} } }
        aux_off_night:
          name: "AUX-OFF (also turn off)"
          default: {}
          selector: { target: { entity: {} } }
        night_off_delay:
          name: "Off-delay seconds"
          default: 60
          selector: { number: { min: 0, max: 86400, step: 1 } }

    lockout_override:
      name: "Watch window, lockout & override"
      icon: mdi:account-cancel
      collapsed: false
      input:
        watch_window_minutes:
          name: "Watch window after activation (minutes)"
          description: "During this period: Manual OFF ⇒ Lockout; Level change ⇒ Capture override"
          default: 5
          selector:
            number:
              min: 1
              max: 60
              step: 1

        lockout_watch_lights:
          name: "Lights to watch for MANUAL-OFF"
          description: "If any is turned OFF during the watch window, start lockout."
          default: []
          selector:
            entity:
              multiple: true
              filter:
                - domain: light
        manual_off_lockout_mode:
          name: "Manual-OFF source to react to"
          description: "Digital only (UI/app/voice), Physical only (no context), or Any"
          default: "Any"
          selector:
            select:
              mode: dropdown
              options: ["Digital only", "Physical only", "Any"]
        manual_off_lockout_timeout:
          name: "Lockout timeout (minutes)"
          description: "Range 1–120 minutes (1 min to 2 hours)"
          default: 15
          selector:
            number:
              min: 1
              max: 120
              step: 1
        lockout_end_mode:
          name: "How does lockout end?"
          default: "Timeout or Mode change"
          selector:
            select:
              mode: dropdown
              options: ["Timeout", "Until Mode change", "Timeout or Mode change"]
        lockout_timer:
          name: "Timer for lockout (optional, recommended)"
          description: "If set, lockout uses this timer (restart-safe). If blank, fallback self-disable is used."
          default: ""
          selector:
            entity:
              filter:
                - domain: timer

        override_capture_lights:
          name: "Lights to watch for LEVEL changes (capture override)"
          description: "If a level/CT/color change happens during the watch window, snapshot it and reuse on motion."
          default: []
          selector:
            entity:
              multiple: true
              filter:
                - domain: light
        override_change_source:
          name: "Whose changes count for override capture?"
          default: "Any"
          selector:
            select:
              mode: dropdown
              options: ["Digital only", "Physical only", "Any"]
        override_timeout_minutes:
          name: "Override timeout (minutes)"
          description: "How long to reuse the captured levels (1–120)"
          default: 60
          selector:
            number:
              min: 1
              max: 120
              step: 1
        override_end_mode:
          name: "When should override end?"
          default: "Timeout or Mode change"
          selector:
            select:
              mode: dropdown
              options: ["Timeout", "Until Mode change", "Timeout or Mode change"]
        override_timer:
          name: "Timer for override (optional, recommended)"
          description: "If set, we keep override active with this timer (restart-safe)."
          default: ""
          selector:
            entity:
              filter:
                - domain: timer

    misc:
      name: "Misc options"
      icon: mdi:tune
      collapsed: true
      input:
        force_on_even_if_on:
          name: "Force apply even if already on"
          default: false
          selector: { boolean: {} }
        disable_off_via_boolean:
          name: "Disable OFF via boolean (e.g., cleaning/party)"
          default: ""
          selector: { entity: { filter: [{ domain: input_boolean }] } }

mode: restart

variables:
  motion_list: !input motion_or_presence_sensors
  contacts_list: !input contact_sensors
  keepalive_list: !input keepalive_sensors
  lux_entity: !input lux_sensor
  on_lux_max: !input on_lux_max
  off_lux_min: !input off_lux_min

  mode_entity: !input mode_helper
  mode_day: !input mode_day_value
  mode_eve: !input mode_evening_value
  mode_ngt: !input mode_night_value
  mode_now: "{{ states(mode_entity) if mode_entity else 'Day' }}"

  scene_day: !input scene_day
  scene_eve: !input scene_evening
  scene_ngt: !input scene_night

  target_day: !input target_day
  target_eve: !input target_evening
  target_ngt: !input target_night

  day_bri: !input day_brightness
  eve_bri: !input evening_brightness
  ngt_bri: !input night_brightness
  day_kelvin: !input day_kelvin
  eve_kelvin: !input evening_kelvin
  ngt_kelvin: !input night_kelvin
  day_rgb: !input day_rgb
  eve_rgb: !input evening_rgb
  ngt_rgb: !input night_rgb

  aux_on_day: !input aux_on_day
  aux_on_eve: !input aux_on_evening
  aux_on_ngt: !input aux_on_night
  aux_off_day: !input aux_off_day
  aux_off_eve: !input aux_off_evening
  aux_off_ngt: !input aux_off_night

  day_off: !input day_off_delay
  eve_off: !input evening_off_delay
  ngt_off: !input night_off_delay
  off_delay: >
    {% set m = states(mode_entity) if mode_entity else 'Day' %}
    {% if m == mode_day %}{{ day_off }}
    {% elif m == mode_eve %}{{ eve_off }}
    {% elif m == mode_ngt %}{{ ngt_off }}
    {% else %}{{ day_off }}{% endif %}

  watch_window: !input watch_window_minutes
  lockout_watch: !input lockout_watch_lights
  lockout_mode: !input manual_off_lockout_mode
  lockout_timeout_min: !input manual_off_lockout_timeout
  lockout_end_mode: !input lockout_end_mode
  lockout_timer: !input lockout_timer

  override_capture_lights: !input override_capture_lights
  override_change_source: !input override_change_source
  override_timeout_min: !input override_timeout_minutes
  override_end_mode: !input override_end_mode
  override_timer: !input override_timer
  override_scene_id: "{{ (this.entity_id | replace('.','_')) ~ '_level_override' }}"

  force_on_even_if_on: !input force_on_even_if_on
  disable_off_bool: !input disable_off_via_boolean

trigger:
  - platform: state
    id: motion_on
    entity_id: !input motion_or_presence_sensors
    to: "on"
  - platform: state
    id: contact_open
    entity_id: !input contact_sensors
    to: "on"
  - platform: state
    id: motion_off
    entity_id: !input motion_or_presence_sensors
    to: "off"
  - platform: state
    id: contact_closed
    entity_id: !input contact_sensors
    to: "off"
  - platform: state
    id: keepalive_on
    entity_id: !input keepalive_sensors
    to: "on"
  - platform: state
    id: keepalive_open
    entity_id: !input keepalive_sensors
    to: "open"
  - platform: state
    id: mode_change
    entity_id: !input mode_helper
  - platform: numeric_state
    id: lux_off
    entity_id: !input lux_sensor
    above: !input off_lux_min

condition: []

action:
  - variables:
      disable_off_now: "{{ is_state(disable_off_bool,'on') if disable_off_bool else false }}"
      any_motion_on: "{{ expand(motion_list)|selectattr('state','eq','on')|list|count > 0 }}"
      any_contact_open: "{{ expand(contacts_list)|selectattr('state','in',['on','open'])|list|count > 0 }}"
      any_keepalive_on: "{{ expand(keepalive_list)|selectattr('state','in',['on','open'])|list|count > 0 }}"
      lux_ok_to_on: >
        {% if lux_entity and on_lux_max|int > 0 %}
          {{ states(lux_entity)|float(9999) < on_lux_max|int }}
        {% else %}true{% endif %}

  - choose:

      - conditions:
          - condition: trigger
            id: mode_change
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (lockout_timer | default('')) != '' and lockout_end_mode in ['Until Mode change','Timeout or Mode change'] }}"
                sequence:
                  - service: timer.cancel
                    target: { entity_id: !input lockout_timer }
              - conditions:
                  - condition: template
                    value_template: "{{ (override_timer | default('')) != '' and override_end_mode in ['Until Mode change','Timeout or Mode change'] }}"
                sequence:
                  - service: timer.cancel
                    target: { entity_id: !input override_timer }

      - conditions:
          - condition: trigger
            id: lux_off
          - condition: template
            value_template: "{{ not any_motion_on and not any_contact_open and not any_keepalive_on }}"
          - condition: template
            value_template: "{{ not disable_off_now }}"
        sequence:
          - choose:
              - conditions: "{{ states(mode_entity) == mode_day }}"
                sequence:
                  - choose:
                      - conditions: "{{ aux_off_day|length > 0 }}"
                        sequence:
                          - service: homeassistant.turn_off
                            target: !input aux_off_day
                  - choose:
                      - conditions: "{{ target_day|length > 0 }}"
                        sequence:
                          - service: homeassistant.turn_off
                            target: !input target_day
              - conditions: "{{ states(mode_entity) == mode_eve }}"
                sequence:
                  - choose:
                      - conditions: "{{ aux_off_evening|length > 0 }}"
                        sequence:
                          - service: homeassistant.turn_off
                            target: !input aux_off_evening
                  - choose:
                      - conditions: "{{ target_evening|length > 0 }}"
                        sequence:
                          - service: homeassistant.turn_off
                            target: !input target_evening
              - conditions: "{{ states(mode_entity) == mode_ngt }}"
                sequence:
                  - choose:
                      - conditions: "{{ aux_off_night|length > 0 }}"
                        sequence:
                          - service: homeassistant.turn_off
                            target: !input aux_off_night
                  - choose:
                      - conditions: "{{ target_night|length > 0 }}"
                        sequence:
                          - service: homeassistant.turn_off
                            target: !input target_night

      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: contact_open
          - condition: template
            value_template: "{{ lux_ok_to_on }}"
          - condition: template
            value_template: >
              {% set lt = (lockout_timer | default('')) %}
              {{ not lt or is_state(lt, 'idle') }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set ot = (override_timer | default('')) %}
                      {{ ot and is_state(ot, 'active') }}
                sequence:
                  - service: scene.turn_on
                    data:
                      entity_id: "scene.{{ override_scene_id }}"
                  - stop: "Applied override scene (timer active)"
            default: []

          - choose:

              - conditions: "{{ states(mode_entity) == mode_day }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_day != '' }}"
                        sequence:
                          - service: scene.turn_on
                            data:
                              entity_id: "{{ scene_day }}"
                      - conditions:
                          - condition: template
                            value_template: "{{ target_day|length > 0 }}"
                        sequence:
                          - choose:
                              - conditions: "{{ (day_rgb | length) > 0 }}"
                                sequence:
                                  - service: light.turn_on
                                    target: !input target_day
                                    data:
                                      brightness_pct: "{{ day_bri|int }}"
                                      rgb_color: "{{ day_rgb }}"
                              - conditions:
                                  - condition: template
                                    value_template: "{{ (day_rgb | length) == 0 and day_kelvin|int > 0 }}"
                                sequence:
                                  - service: light.turn_on
                                    target: !input target_day
                                    data:
                                      brightness_pct: "{{ day_bri|int }}"
                                      color_temp_kelvin: "{{ day_kelvin|int }}"
                              - conditions: []
                                sequence:
                                  - service: light.turn_on
                                    target: !input target_day
                                    data:
                                      brightness_pct: "{{ day_bri|int }}"
                  - choose:
                      - conditions: "{{ aux_on_day|length > 0 }}"
                        sequence:
                          - service: homeassistant.turn_on
                            target: !input aux_on_day
                  - if:
                      - condition: template
                        value_template: "{{ force_on_even_if_on }}"
                    then:
                      - service: homeassistant.turn_on
                        target: !input target_day

              - conditions: "{{ states(mode_entity) == mode_eve }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_evening != '' }}"
                        sequence:
                          - service: scene.turn_on
                            data:
                              entity_id: "{{ scene_evening }}"
                      - conditions:
                          - condition: template
                            value_template: "{{ target_evening|length > 0 }}"
                        sequence:
                          - choose:
                              - conditions: "{{ (evening_rgb | length) > 0 }}"
                                sequence:
                                  - service: light.turn_on
                                    target: !input target_evening
                                    data:
                                      brightness_pct: "{{ eve_bri|int }}"
                                      rgb_color: "{{ evening_rgb }}"
                              - conditions:
                                  - condition: template
                                    value_template: "{{ (evening_rgb | length) == 0 and eve_kelvin|int > 0 }}"
                                sequence:
                                  - service: light.turn_on
                                    target: !input target_evening
                                    data:
                                      brightness_pct: "{{ eve_bri|int }}"
                                      color_temp_kelvin: "{{ eve_kelvin|int }}"
                              - conditions: []
                                sequence:
                                  - service: light.turn_on
                                    target: !input target_evening
                                    data:
                                      brightness_pct: "{{ eve_bri|int }}"
                  - choose:
                      - conditions: "{{ aux_on_evening|length > 0 }}"
                        sequence:
                          - service: homeassistant.turn_on
                            target: !input aux_on_evening
                  - if:
                      - condition: template
                        value_template: "{{ force_on_even_if_on }}"
                    then:
                      - service: homeassistant.turn_on
                        target: !input target_evening

              - conditions: "{{ states(mode_entity) == mode_ngt }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_night != '' }}"
                        sequence:
                          - service: scene.turn_on
                            data:
                              entity_id: "{{ scene_night }}"
                      - conditions:
                          - condition: template
                            value_template: "{{ target_night|length > 0 }}"
                        sequence:
                          - choose:
                              - conditions: "{{ (night_rgb | length) > 0 }}"
                                sequence:
                                  - service: light.turn_on
                                    target: !input target_night
                                    data:
                                      brightness_pct: "{{ ngt_bri|int }}"
                                      rgb_color: "{{ night_rgb }}"
                              - conditions:
                                  - condition: template
                                    value_template: "{{ (night_rgb | length) == 0 and ngt_kelvin|int > 0 }}"
                                sequence:
                                  - service: light.turn_on
                                    target: !input target_night
                                    data:
                                      brightness_pct: "{{ ngt_bri|int }}"
                                      color_temp_kelvin: "{{ ngt_kelvin|int }}"
                              - conditions: []
                                sequence:
                                  - service: light.turn_on
                                    target: !input target_night
                                    data:
                                      brightness_pct: "{{ ngt_bri|int }}"
                  - choose:
                      - conditions: "{{ aux_on_night|length > 0 }}"
                        sequence:
                          - service: homeassistant.turn_on
                            target: !input aux_on_night
                  - if:
                      - condition: template
                        value_template: "{{ force_on_even_if_on }}"
                    then:
                      - service: homeassistant.turn_on
                        target: !input target_night

          - wait_for_trigger:
              - platform: state
                id: "manual_off"
                entity_id: !input lockout_watch_lights
                to: "off"
              - platform: state
                id: "level_change"
                entity_id: !input override_capture_lights
                from: "on"
                to: "on"
            timeout:
              minutes: "{{ watch_window|int }}"
            continue_on_timeout: false

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ wait.trigger is not none and wait.trigger.id == 'manual_off' }}"
                  - condition: template
                    value_template: >
                      {% set uid = wait.trigger.to_state.context.user_id %}
                      {% set pid = wait.trigger.to_state.context.parent_id %}
                      {% if lockout_mode == 'Digital only' %}
                        {{ uid is not none }}
                      {% elif lockout_mode == 'Physical only' %}
                        {{ uid is none and pid is none }}
                      {% else %} true {% endif %}
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ (lockout_timer | default('')) != '' }}"
                        sequence:
                          - service: timer.start
                            target: { entity_id: !input lockout_timer }
                            data:
                              duration: "{{ (lockout_timeout_min|int) * 60 }}"
                      - conditions: []
                        sequence:
                          - service: automation.turn_off
                            target: { entity_id: "{{ this.entity_id }}" }
                          - delay:
                              minutes: "{{ lockout_timeout_min|int }}"
                          - service: automation.turn_on
                            target: { entity_id: "{{ this.entity_id }}" }

              - conditions:
                  - condition: template
                    value_template: "{{ wait.trigger is not none and wait.trigger.id == 'level_change' }}"
                  - condition: template
                    value_template: >
                      {% set uid = wait.trigger.to_state.context.user_id %}
                      {% set pid = wait.trigger.to_state.context.parent_id %}
                      {% if override_change_source == 'Digital only' %}
                        {{ uid is not none }}
                      {% elif override_change_source == 'Physical only' %}
                        {{ uid is none and pid is none }}
                      {% else %} true {% endif %}
                sequence:
                  - service: scene.create
                    data:
                      scene_id: "{{ override_scene_id }}"
                      snapshot_entities: !input override_capture_lights
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ (override_timer | default('')) != '' }}"
                        sequence:
                          - service: timer.start
                            target: { entity_id: !input override_timer }
                            data:
                              duration: "{{ (override_timeout_min|int) * 60 }}"

      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_off
              - condition: trigger
                id: contact_closed
              - condition: trigger
                id: mode_change
        sequence:
          - wait_for_trigger:
              - platform: state
                entity_id: !input motion_or_presence_sensors
                to: "on"
              - platform: state
                entity_id: !input contact_sensors
                to: "on"
              - platform: state
                entity_id: !input keepalive_sensors
                to: "on"
              - platform: state
                entity_id: !input keepalive_sensors
                to: "open"
            timeout:
              seconds: "{{ off_delay|int }}"
            continue_on_timeout: true
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ wait.trigger is not none }}"
                sequence: []
              - conditions: []
                sequence:
                  - condition: template
                    value_template: "{{ not disable_off_now }}"
                  - choose:
                      - conditions: "{{ states(mode_entity) == mode_day }}"
                        sequence:
                          - choose:
                              - conditions: "{{ aux_off_day|length > 0 }}"
                                sequence:
                                  - service: homeassistant.turn_off
                                    target: !input aux_off_day
                          - choose:
                              - conditions: "{{ target_day|length > 0 }}"
                                sequence:
                                  - service: homeassistant.turn_off
                                    target: !input target_day
                      - conditions: "{{ states(mode_entity) == mode_eve }}"
                        sequence:
                          - choose:
                              - conditions: "{{ aux_off_evening|length > 0 }}"
                                sequence:
                                  - service: homeassistant.turn_off
                                    target: !input aux_off_evening
                          - choose:
                              - conditions: "{{ target_evening|length > 0 }}"
                                sequence:
                                  - service: homeassistant.turn_off
                                    target: !input target_evening
                      - conditions: "{{ states(mode_entity) == mode_ngt }}"
                        sequence:
                          - choose:
                              - conditions: "{{ aux_off_night|length > 0 }}"
                                sequence:
                                  - service: homeassistant.turn_off
                                    target: !input aux_off_night
                          - choose:
                              - conditions: "{{ target_night|length > 0 }}"
                                sequence:
                                  - service: homeassistant.turn_off
                                    target: !input target_night
